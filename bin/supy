#!/usr/bin/env python

import inspect, os, sys

sys.path.append( os.getcwd() )
if len(sys.argv)>1 and ".py" in sys.argv[1]:
    sys.path.insert(0,os.getcwd()+ "/" + '/'.join( sys.argv[1].split('/')[:-1] ) )

import ROOT
ROOT.gROOT.SetBatch(True)
ROOT.PyConfig.IgnoreCommandLineOptions = True

import supy
import configuration
configuration.initializeROOT(ROOT, configuration.cppFiles())
############################################
def moduleName(arg) :
    while "//" in arg : arg = arg.replace("//","/")
    module = arg.split('/')[-1].replace(".py",'')
    return module
############################################
def importedClass(module) :
    exec("import "+module)
    py = module + ".py"
    if not os.path.exists(py):  # apparently only .pyc exists
        print "WARNING: file %s does not exist" % py

    count = 0
    theClass = None
    for itemName in dir(eval(module)) :
        item=eval(module+"."+itemName)
        if not inspect.isclass(item) : continue        
        if issubclass(item, supy.analysis) and item is not supy.analysis :
            count+=1
            theClass = item
    assert count==1,arg+" needs exactly 1 class which inherits from analysis; it has "+str(count)
    assert module==theClass.__name__,"module name %s != class name %s"%(module, theClass.__name__)
    return theClass
############################################
def doBatch(someInstance) :
    argsAndOptions = sys.argv[1:]
    argsAndOptions.remove("--batch")
    baseCmd = supy.whereami()+"/bin/supy "+" ".join(argsAndOptions)

    os.system("chmod +x %s" % supy.batch.subScript())

    site = supy.sites.prefix()

    scriptDir = someInstance.globalStem
    os.system("mkdir -p "+scriptDir)
    os.system(supy.sites.info(key="tarCommand"))

    args = []
    for conf in someInstance.configurations :
        for looper in someInstance.listsOfLoopers[conf['tag']] :
            os.system("mkdir -p %s/%s/%s"%(scriptDir,conf['tag'], looper.name))
            for iSlice in range(looper.nSlices):
                listOfIndices = {"base": scriptDir,
                                 "tag": conf['tag'],
                                 "analysis": someInstance.name,
                                 "sample": looper.name,
                                 "nSlices": looper.nSlices,
                                 "iSlice": iSlice,
                                 "site": site,
                                 }
                args.append( (baseCmd + " --site %(site)s --jobid %(iSlice)d --tag '%(tag)s' --sample %(sample)s"%listOfIndices,
                              listOfIndices) )
    supy.utils.operateOnListUsingQueue(configuration.nCoresDefault(),
                                       supy.utils.qWorker(supy.batch.prepareJob), args)

    indices = [a[1] for a in args]
    scripts = [(supy.batch.jobScriptFull(**dct),) for dct in indices]
    supy.utils.operateOnListUsingQueue(configuration.nCoresDefault(),
                                       supy.utils.qWorker(supy.batch.submitJob), scripts)
############################################
        
# get options
options,arg = supy.options.opts()

# generate dictionaries
supy.utils.generateDictionaries(inList = configuration.cppROOTDictionariesToGenerate(), dir = supy.whereami())

# construct the analysis
anInstance = importedClass(moduleName(arg))(options)

if options.batch : #make one script per job and submit them to the queue
    doBatch(anInstance)
elif options.loop : #loop over the events
    anInstance.loop()

# merge output and conclude
if options.jobId==None and not options.batch :
    try:
        anInstance.mergeAllOutput()
        anInstance.manageSecondaries(options.update,options.report,options.reports)
        if options.update==None and options.report==None and options.reports==None:
            anInstance.concludeAll()
    except AssertionError as foo:
        print
        print foo
        #print "Have you looped?"
############################################
